{"version":3,"file":"index-XdR35-El.js","sources":["../../admin/src/pluginId.js","../../admin/src/components/Initializer.js","../../admin/src/components/CMEditView/RightLinksCompo/Summary/reducer.js","../../admin/src/components/HomePage/Main/EmptyComponentLayout/illo.jsx","../../admin/src/components/CMEditView/utils/checks.js","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/SEOAccordion/index.jsx","../../admin/src/utils/getTrad.js","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/MetaRobotCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/WordCountCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/MetaTitleCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/OpenGraphCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/CanonicalUrlCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/LastUpdatedAtCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/KeywordDensityCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/StructuredDataCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/MetaDescriptionCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/AlternativeTextCheck/index.jsx","../../admin/src/components/CMEditView/utils/getRichTextAndBlocksFields.js","../../admin/src/components/CMEditView/utils/getRegularImageAltTexts.js","../../admin/src/components/CMEditView/utils/getRichTextData.js","../../admin/src/components/CMEditView/RightLinksCompo/SeoChecks/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/PreviewChecks/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/BrowserPreview/Serp/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/BrowserPreview/MetaChecks/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/BrowserPreview/KeywordCheck/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/BrowserPreview/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/OpenGraphPreview/Facebook/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/OpenGraphPreview/X/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/OpenGraphPreview/LinkedIn/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/Summary/OpenGraphPreview/index.jsx","../../admin/src/hooks/useSettingsApi.js","../../admin/src/components/CMEditView/RightLinksCompo/Summary/index.jsx","../../admin/src/components/CMEditView/RightLinksCompo/index.jsx","../../admin/src/permissions.js","../../admin/src/utils/prefixPluginTranslations.js","../../admin/src/index.js"],"sourcesContent":["import pluginPkg from '../../package.json';\n\nexport const pluginId = pluginPkg.name.replace(/^@strapi\\/plugin-/i, '');\n","/**\n *\n * Initializer\n *\n */\nimport * as React from 'react';\nimport { pluginId } from '../pluginId';\n\nexport const Initializer = ({ setPlugin }) => {\n  const ref = React.useRef(undefined);\n  ref.current = setPlugin;\n\n  React.useEffect(() => {\n    if (ref.current) {\n      ref.current(pluginId);\n    }\n  }, []);\n\n  return null;\n};\n","function reducer(state, action) {\n  switch (action.type) {\n    case 'UPDATE_PONCTUAL':\n      return {\n        ...state,\n        [action.value.entity]: {\n          qualityVerdict: action.value?.qualityVerdict,\n          message: action.value?.message,\n        },\n      };\n    case 'UPDATE_FOR_PREVIEW':\n      return action.value;\n    default:\n      throw new Error();\n  }\n}\n\nexport { reducer };\n","export const Illo = () => (\n  <svg width=\"159\" height=\"88\" viewBox=\"0 0 159 88\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M134.933 17.417C137.768 17.417 140.067 19.7153 140.067 22.5503C140.067 25.3854 137.768 27.6837 134.933 27.6837H105.6C108.435 27.6837 110.733 29.9819 110.733 32.817C110.733 35.6521 108.435 37.9503 105.6 37.9503H121.733C124.568 37.9503 126.867 40.2486 126.867 43.0837C126.867 45.9187 124.568 48.217 121.733 48.217H114.272C110.698 48.217 107.8 50.5153 107.8 53.3503C107.8 55.2404 109.267 56.9515 112.2 58.4837C115.035 58.4837 117.333 60.7819 117.333 63.617C117.333 66.4521 115.035 68.7503 112.2 68.7503H51.3333C48.4982 68.7503 46.2 66.4521 46.2 63.617C46.2 60.7819 48.4982 58.4837 51.3333 58.4837H22.7333C19.8982 58.4837 17.6 56.1854 17.6 53.3503C17.6 50.5153 19.8982 48.217 22.7333 48.217H52.0666C54.9017 48.217 57.2 45.9187 57.2 43.0837C57.2 40.2486 54.9017 37.9503 52.0666 37.9503H33.7333C30.8982 37.9503 28.6 35.6521 28.6 32.817C28.6 29.9819 30.8982 27.6837 33.7333 27.6837H63.0666C60.2316 27.6837 57.9333 25.3854 57.9333 22.5503C57.9333 19.7153 60.2316 17.417 63.0666 17.417H134.933ZM134.933 37.9503C137.768 37.9503 140.067 40.2486 140.067 43.0837C140.067 45.9187 137.768 48.217 134.933 48.217C132.098 48.217 129.8 45.9187 129.8 43.0837C129.8 40.2486 132.098 37.9503 134.933 37.9503Z\"\n      fill=\"#DBDBFA\"\n    />\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M95.826 16.6834L102.647 66.4348L103.26 71.4261C103.458 73.034 102.314 74.4976 100.706 74.695L57.7621 79.9679C56.1542 80.1653 54.6906 79.0219 54.4932 77.4139L47.8816 23.5671C47.7829 22.7631 48.3546 22.0313 49.1586 21.9326C49.1637 21.932 49.1688 21.9313 49.1739 21.9307L52.7367 21.5311L95.826 16.6834ZM55.6176 21.208L58.9814 20.8306Z\"\n      fill=\"white\"\n    />\n    <path\n      d=\"M55.6176 21.208L58.9814 20.8306M95.826 16.6834L102.647 66.4348L103.26 71.4261C103.458 73.034 102.314 74.4976 100.706 74.695L57.7621 79.9679C56.1542 80.1653 54.6906 79.0219 54.4932 77.4139L47.8816 23.5671C47.7829 22.7631 48.3546 22.0313 49.1586 21.9326C49.1637 21.932 49.1688 21.9313 49.1739 21.9307L52.7367 21.5311L95.826 16.6834Z\"\n      stroke=\"#7E7BF6\"\n      strokeWidth=\"2.5\"\n    />\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M93.9695 19.8144L100.144 64.9025L100.699 69.4258C100.878 70.8831 99.8559 72.2077 98.416 72.3845L59.9585 77.1065C58.5185 77.2833 57.2062 76.2453 57.0272 74.7881L51.0506 26.112C50.9519 25.308 51.5236 24.5762 52.3276 24.4775L57.0851 23.8934\"\n      fill=\"#F0F0FF\"\n    />\n    <path\n      fillRule=\"evenodd\"\n      clipRule=\"evenodd\"\n      d=\"M97.701 7.33301H64.2927C63.7358 7.33301 63.2316 7.55873 62.8667 7.92368C62.5017 8.28862 62.276 8.79279 62.276 9.34967V65.083C62.276 65.6399 62.5017 66.1441 62.8667 66.509C63.2316 66.874 63.7358 67.0997 64.2927 67.0997H107.559C108.116 67.0997 108.62 66.874 108.985 66.509C109.35 66.1441 109.576 65.6399 109.576 65.083V19.202C109.576 18.6669 109.363 18.1537 108.985 17.7755L99.1265 7.92324C98.7484 7.54531 98.2356 7.33301 97.701 7.33301Z\"\n      fill=\"white\"\n      stroke=\"#7F7CFA\"\n      strokeWidth=\"2.5\"\n    />\n    <path\n      d=\"M98.026 8.17871V16.6833C98.026 17.8983 99.011 18.8833 100.226 18.8833H106.044\"\n      stroke=\"#807EFA\"\n      strokeWidth=\"2.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n    <path\n      d=\"M70.1594 56.2838H89.2261M70.1594 18.8838H89.2261H70.1594ZM70.1594 27.6838H101.693H70.1594ZM70.1594 37.2171H101.693H70.1594ZM70.1594 46.7505H101.693H70.1594Z\"\n      stroke=\"#817FFA\"\n      strokeWidth=\"2.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </svg>\n);\n","import get from 'lodash/get';\nimport isNull from 'lodash/isNull';\nimport isEmpty from 'lodash/isEmpty';\n\nexport const qualityVerdict = {\n  good: 'good',\n  improvements: 'improvements',\n  bad: 'bad',\n};\n\nexport const getMetaTitleCheckPreview = (modifiedData) => {\n  const metaTitle = get(modifiedData, 'seo.metaTitle');\n\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  if (isNull(metaTitle) || isEmpty(metaTitle)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n  } else if (metaTitle.length > 60) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  }\n  return status;\n};\n\nexport const getMetaDescriptionPreview = (modifiedData) => {\n  const metaDescription = get(modifiedData, 'seo.metaDescription');\n\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  if (isNull(metaDescription) || isEmpty(metaDescription)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n  } else if (metaDescription.length > 160) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  } else if (metaDescription.length < 50) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  }\n  return status;\n};\n\nexport const getAlternativeTextPreview = (emptyAltCount) => {\n  const intersections = get(emptyAltCount, 'intersections', null);\n  const richTextAlts = get(emptyAltCount, 'richTextAlts', null);\n  const altTexts = get(emptyAltCount, 'altTexts', null);\n\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  const missingRichTextAlt = richTextAlts.filter((x) => x.occurences != 0).length;\n  if (intersections === 0) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  } else if (altTexts.includes('')) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n  } else if (missingRichTextAlt >= 1) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n  }\n  return status;\n};\n\nexport const getWordCountPreview = (wordCount) => {\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  if (isNull(wordCount)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n    return;\n  } else if (wordCount < 300) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n  }\n  return status;\n};\n\nexport const getKeywordDensityPreview = (keywordsDensity) => {\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  if (isEmpty(keywordsDensity)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n    return status;\n  }\n\n  Object.keys(keywordsDensity).map((keyword) => {\n    if (get(keywordsDensity[keyword], 'count', 0) === 0) {\n      status = {\n        message: '',\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    } else if (get(keywordsDensity[keyword], 'count', 0) <= 1) {\n      status = {\n        message: '',\n        qualityVerdict: qualityVerdict.bad,\n      };\n    }\n  });\n\n  return status;\n};\n\nexport const canonicalUrlPreview = (modifiedData) => {\n  const canonicalUrl = get(modifiedData, 'seo.canonicalURL');\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n  if (isNull(canonicalUrl)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  }\n  return status;\n};\n\nexport const lastUpdatedAtPreview = (modifiedData) => {\n  const updatedAt = get(modifiedData, 'updatedAt');\n\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.improvements,\n  };\n\n  if (isNull(updatedAt)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  } else {\n    const oneYearAgo = Date.parse(new Date(new Date().setFullYear(new Date().getFullYear() - 1)));\n    if (Date.parse(updatedAt) >= oneYearAgo) {\n      status = {\n        message: '',\n        qualityVerdict: qualityVerdict.good,\n      };\n    }\n  }\n  return status;\n};\n\nexport const metaRobotPreview = (modifiedData) => {\n  const metaRobots = get(modifiedData, 'seo.metaRobots');\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n  if (isNull(metaRobots) || isEmpty(metaRobots)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.good,\n    };\n  }\n  return status;\n};\n\nexport const openGraphPreview = (modifiedData) => {\n  const openGraph = get(modifiedData, 'seo.openGraph');\n\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  if (isNull(openGraph) || openGraph === undefined) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n    return status;\n  } else if (!openGraph['ogTitle'] || !openGraph['ogDescription'] || !openGraph['ogImage']) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.improvements,\n    };\n  }\n  return status;\n};\n\nexport const structuredDataPreview = (modifiedData) => {\n  const structuredData = get(modifiedData, 'seo.structuredData');\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n  if (isEmpty(structuredData)) {\n    status = {\n      message: '',\n      qualityVerdict: qualityVerdict.bad,\n    };\n  }\n  return status;\n};\n","import * as React from 'react';\n\nimport { Box, Typography, Accordion, IconButton } from '@strapi/design-system';\nimport { Information, CrossCircle, CheckCircle, WarningCircle } from '@strapi/icons';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const SEOAccordion = ({ title, status, component, label }) => {\n  const getIcon = () => {\n    switch (status?.qualityVerdict) {\n      case qualityVerdict.good:\n        return CheckCircle;\n      case qualityVerdict.improvements:\n        return WarningCircle;\n      // TODO update the design system to support icons like this\n      // <WarningCircle fill=\"warning600\" />\n      case qualityVerdict.bad:\n        return CrossCircle;\n      default:\n        return WarningCircle;\n    }\n  };\n\n  return (\n    <Accordion.Root>\n      <Accordion.Item value=\"acc-01\">\n        <Accordion.Header>\n          <Accordion.Trigger icon={getIcon()}>{title}</Accordion.Trigger>\n          <Accordion.Actions>\n            <IconButton label={label}>\n              <Information />\n            </IconButton>\n          </Accordion.Actions>\n        </Accordion.Header>\n        <Accordion.Content>\n          <Box paddingTop={4} paddingLeft={4} paddingBottom={4}>\n            <Typography variant=\"omega\">{status?.message}</Typography>\n          </Box>\n          {component && component}\n        </Accordion.Content>\n      </Accordion.Item>\n    </Accordion.Root>\n  );\n};\n","import { pluginId } from '../pluginId';\n\nexport const getTrad = (id) => `${pluginId}.${id}`;\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\nimport isEmpty from 'lodash/isEmpty';\nimport get from 'lodash/get';\n\nimport { Box, Status, Flex, Typography } from '@strapi/design-system';\nimport { CheckCircle, WarningCircle } from '@strapi/icons';\n\nimport { SEOAccordion } from '../SEOAccordion';\nimport { SeoCheckerContext } from '../../Summary';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nconst robotTags = [\n  { name: 'noindex', message: 'Search engines will index this page.' },\n  {\n    name: 'nofollow',\n    message: 'Search engines will follow links from this page',\n  },\n  { name: 'noarchive', message: 'Search engines will cache your page.' },\n  {\n    name: 'nosnippet',\n    message: 'Search engines will show a snippet of this page in search results.',\n  },\n  {\n    name: 'noimageindex',\n    message: 'Google will index the images on this page.',\n  },\n  {\n    name: 'nositelinkssearchbox',\n    message: 'Google will show the search box in search results.',\n  },\n];\n\nexport const MetaRobotCheck = ({ metaRobots, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.metaRobotsCheck.default'),\n      defaultMessage: 'Robot meta tags have been found!',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n  const [tags, setTags] = React.useState([]);\n\n  React.useEffect(() => {\n    if (isNull(metaRobots) || isEmpty(metaRobots)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.metaRobotsCheck.not-found'),\n          defaultMessage: 'No Robot meta tags have been found.',\n        }),\n        qualityVerdict: qualityVerdict.good,\n      };\n    } else {\n      setTags(metaRobots.split(','));\n    }\n    if (!isEqual(status, checks.metaRobots))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'metaRobots' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.meta-robots'),\n        defaultMessage: 'Meta Robots',\n      })}\n      status={checks.metaRobots}\n      label={formatMessage({\n        id: getTrad('SEOChecks.metaRobotsCheck.label'),\n        defaultMessage:\n          'The robots meta tag informs search engines which pages on your site should be indexed and more.',\n      })}\n      component={\n        <Box padding={2} background=\"neutral100\">\n          {robotTags.map((tag, index) => (\n            <Flex spacing={2} key={index} horizontal padding={2}>\n              {tags.find((x) => x.trim() === tag.name) ? (\n                <CheckCircle aria-hidden={true} fill={`success600`} />\n              ) : (\n                <WarningCircle aria-hidden={true} fill={`warning600`} />\n              )}\n\n              <Typography paddingLeft={1}>\n                {tags.find((x) => x.trim() === tag.name)\n                  ? `${tag.name} is activated:\n          ${tag.message.replace('will', 'will not')}`\n                  : `${tag.name} is disabled: ${tag.message}`}\n              </Typography>\n            </Flex>\n          ))}\n          <Flex spacing={2} paddingTop={4} paddingLeft={2} paddingRight={2} paddingBottom={4}>\n            <Status variant=\"secondary\" showBullet={false}>\n              <Typography>\n                <Typography fontWeight=\"bold\">Notice: </Typography>\n                In order to not index your entry and no follow, your MetaRobots field should contain\n                the following:\n                <Typography fontWeight=\"bold\"> noindex, nofollow </Typography>. The rest should be\n                handled by your front-end code logic. \"If the field contains noindex, then you need\n                to create the corresponding meta tag etc...\"\n              </Typography>\n            </Status>\n          </Flex>\n        </Box>\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\nimport isNumber from 'lodash/isNumber';\n\nimport { Box, Typography } from '@strapi/design-system';\n\nimport { SEOAccordion } from '../SEOAccordion';\nimport { SeoCheckerContext } from '../../Summary';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const WordCountCheck = ({ wordCount, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.wordCountCheck.default'),\n      defaultMessage:\n        'You have more than 300 words. The word counter is not a direct ranking factor. But your content should be as high quality as possible, with relevant and unique information. To meet these conditions, your content requires a minimum of paragraphs, and therefore of words.',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isNull(wordCount)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.wordCountCheck.not-found'),\n          defaultMessage: 'No Richtext content have been found.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n      return;\n    } else if (wordCount < 300) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.wordCountCheck.300'),\n          defaultMessage: 'Your 1st level Richtext contents have less than 300 words.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    }\n    if (!isEqual(status, checks.wordCount))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'wordCount' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.word-counter'),\n        defaultMessage: 'Word Counter',\n      })}\n      status={checks.wordCount}\n      label={formatMessage({\n        id: getTrad('SEOChecks.wordCountCheck.label'),\n        defaultMessage:\n          'Your content should be as high quality as possible, with relevant and unique information. You entry requires a minimum of paragraphs, and therefore of words.',\n      })}\n      component={\n        isNumber(wordCount) && (\n          <Box padding={4} background=\"neutral100\">\n            <Typography variant=\"omega\" fontWeight=\"bold\">\n              {formatMessage({\n                id: getTrad('SEOChecks.wordCountCheck.words'),\n                defaultMessage: 'Words:',\n              })}{' '}\n              {wordCount}\n            </Typography>\n          </Box>\n        )\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Box, Flex, ProgressBar, Typography } from '@strapi/design-system';\n\nimport { SEOAccordion } from '../SEOAccordion';\nimport { SeoCheckerContext } from '../../Summary';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const MetaTitleCheck = ({ metaTitle, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  const maxLength = 60;\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.metaTitleCheck.default'),\n      defaultMessage: 'A Meta Title has been found!',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isNull(metaTitle) || isEmpty(metaTitle)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.metaTitleCheck.not-found'),\n          defaultMessage: 'No Meta Title has been found.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    } else if (metaTitle.length > maxLength) {\n      status = {\n        message: formatMessage({\n          id: getTrad('Title-settings.metaTitle-too-long'),\n          defaultMessage: 'Meta Title is too long',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    }\n    if (!isEqual(status, checks.metaTitle))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'metaTitle' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.meta-title'),\n        defaultMessage: 'Meta title',\n      })}\n      status={checks.metaTitle}\n      label={formatMessage({\n        id: getTrad('Title-settings.metaTitle-tooltip'),\n        defaultMessage:\n          'The title tag is the clickable title of a webpage that appears with the result on the SERP (search engine page results page).\\n You should aim to make your SEO titles around 60 characters long. Clear title tags will go a long way towards making your website easy to read and understand.',\n      })}\n      component={\n        metaTitle && (\n          <Box padding={4} background=\"neutral100\">\n            <Typography variant=\"omega\" fontWeight=\"semiBold\">\n              {metaTitle}\n            </Typography>\n\n            <Box paddingTop={2}>\n              <Flex horizontal spacing={2}>\n                <ProgressBar\n                  size=\"M\"\n                  value={\n                    (metaTitle.length * 100) / maxLength > 100\n                      ? 100\n                      : (metaTitle.length * 100) / maxLength\n                  }\n                ></ProgressBar>\n                <Typography variant=\"pi\" padding={2}>\n                  ({metaTitle.length}/{maxLength})\n                </Typography>\n              </Flex>\n            </Box>\n          </Box>\n        )\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\n\nimport { SEOAccordion } from '../SEOAccordion';\nimport { SeoCheckerContext } from '../../Summary';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const OpenGraphCheck = ({ openGraph, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: '',\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isNull(openGraph) || openGraph === undefined) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.openGraphCheck.not-found'),\n          defaultMessage: 'No OpenGraph tags have been found.',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    } else if (!openGraph['ogTitle'] || !openGraph['ogDescription'] || !openGraph['ogImage']) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.openGraphCheck.not-configured'),\n          defaultMessage: 'OpenGraph minimum required tags are not configured.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    } else {\n      status = {\n        message: `${formatMessage({\n          id: getTrad('SEOChecks.openGraphCheck.configured'),\n          defaultMessage: 'OpenGraph tags are configured',\n        })}`,\n        qualityVerdict: qualityVerdict.good,\n      };\n    }\n\n    if (!isEqual(status, checks.openGraph))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'openGraph' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.meta-social'),\n        defaultMessage: 'OpenGraph Tags',\n      })}\n      status={checks.openGraph}\n      label={formatMessage({\n        id: getTrad('SEOChecks.openGraphCheck.label'),\n        defaultMessage:\n          'OpenGraph tags allow you to manage the title, description & image of your posts.',\n      })}\n    />\n  );\n};\n","import * as React from 'react';\n\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\n\nimport { useIntl } from 'react-intl';\nimport { getTrad } from '../../../../../utils/getTrad';\n\nimport { Box, Typography } from '@strapi/design-system';\n\nimport { SEOAccordion } from '../SEOAccordion';\n\nimport { SeoCheckerContext } from '../../Summary';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const CanonicalUrlCheck = ({ canonicalUrl, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.canonicalUrlCheck.found'),\n      defaultMessage: 'A canonical URL has been found.',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isNull(canonicalUrl)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.canonicalUrlCheck.default'),\n          defaultMessage: 'No Canonical URL has been found.',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    }\n    if (!isEqual(status, checks.canonicalUrl))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'canonicalUrl' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.canonical-url'),\n        defaultMessage: 'Canonical URL',\n      })}\n      status={checks.canonicalUrl}\n      label={formatMessage({\n        id: getTrad('SEOChecks.canonicalUrlCheck.label'),\n        defaultMessage: 'This will check if you have a canonical URL.',\n      })}\n      component={\n        <Box padding={canonicalUrl ? 4 : 0} background=\"neutral100\">\n          {canonicalUrl && (\n            <Typography variant=\"omega\" fontWeight=\"bold\">\n              {canonicalUrl}\n            </Typography>\n          )}\n        </Box>\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\n\nimport { formatDistance } from 'date-fns';\n\nimport { Box, Typography } from '@strapi/design-system';\n\nimport { getTrad } from '../../../../../utils/getTrad';\n\nimport { SEOAccordion } from '../SEOAccordion';\n\nimport { SeoCheckerContext } from '../../Summary';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const LastUpdatedAtCheck = ({ updatedAt, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SSEOChecks.lastUpdatedAtCheck.default'),\n      defaultMessage:\n        'This content was modified over a year ago! Search engines love fresh content.',\n    }),\n    qualityVerdict: qualityVerdict.improvements,\n  };\n\n  React.useEffect(() => {\n    if (isNull(updatedAt)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.lastUpdatedAtCheck.save-content'),\n          defaultMessage: 'You must save this entry first.',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    } else {\n      const oneYearAgo = Date.parse(new Date(new Date().setFullYear(new Date().getFullYear() - 1)));\n      if (Date.parse(updatedAt) >= oneYearAgo) {\n        status = {\n          message: formatMessage({\n            id: getTrad('SEOChecks.lastUpdatedAtCheck.success'),\n            defaultMessage: 'Awesome! This content was last modified in less than an year ago!',\n          }),\n          qualityVerdict: qualityVerdict.good,\n        };\n      }\n    }\n    if (!isEqual(status, checks.lastUpdatedAt))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'lastUpdatedAt' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.last-updated-at'),\n        defaultMessage: 'Last updated at',\n      })}\n      label={formatMessage({\n        id: getTrad('SEOChecks.lastUpdatedAtCheck.label'),\n        defaultMessage:\n          'Search engines love fresh content. This will check if your entry was last modified in less than an year ago.',\n      })}\n      status={checks.lastUpdatedAt}\n      component={\n        updatedAt && (\n          <Box padding={4} background=\"neutral100\">\n            <Typography variant=\"omega\">\n              {formatMessage({\n                id: getTrad('SEOChecks.lastUpdatedAtCheck.last\"'),\n                defaultMessage: 'Last updated at:',\n              })}{' '}\n              <Typography variant=\"omega\" fontWeight=\"bold\">\n                {' '}\n                {formatDistance(new Date(updatedAt), new Date(), {\n                  addSuffix: true,\n                })}\n              </Typography>\n            </Typography>\n          </Box>\n        )\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport isEmpty from 'lodash/isEmpty';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\n\nimport { Box, Flex, Badge } from '@strapi/design-system';\n\nimport { getTrad } from '../../../../../utils/getTrad';\n\nimport { SEOAccordion } from '../SEOAccordion';\n\nimport { SeoCheckerContext } from '../../Summary';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const KeywordDensityCheck = ({ keywordsDensity, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.keywordsDensityCheck.default'),\n      defaultMessage: 'Every keywords are used more than 2 times.',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isEmpty(keywordsDensity)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.keywordsDensityCheck.no-keywords'),\n          defaultMessage: 'No keywords were found in your SEO component.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    } else {\n      Object.keys(keywordsDensity).map((keyword) => {\n        if (get(keywordsDensity[keyword], 'count', 0) === 0) {\n          status = {\n            message: formatMessage({\n              id: getTrad('SEOChecks.keywordsDensityCheck.one-not-used'),\n              defaultMessage: 'One keyword is not being used in your content.',\n            }),\n            qualityVerdict: qualityVerdict.improvements,\n          };\n        } else if (get(keywordsDensity[keyword], 'count', 0) <= 1) {\n          status = {\n            message: formatMessage({\n              id: getTrad('SEOChecks.keywordsDensityCheck.one-used-once'),\n              defaultMessage: 'One keyword is only used once in your content.',\n            }),\n            qualityVerdict: qualityVerdict.bad,\n          };\n        }\n      });\n    }\n\n    if (!isEqual(status, checks.keywordsDensity))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'keywordsDensity' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.word-densisty'),\n        defaultMessage: 'Keyword Density',\n      })}\n      status={checks.keywordsDensity}\n      label={formatMessage({\n        id: getTrad('SEOChecks.keywordsDensityCheck.label'),\n        defaultMessage:\n          'Define keywords you want to rank for in your SEO component. This will analyse the density of your keywords in your 1st level richtext editors.',\n      })}\n      component={\n        keywordsDensity &&\n        !isEmpty(keywordsDensity) && (\n          <Box padding={2} background=\"neutral100\">\n            <Flex wrap=\"wrap\">\n              {Object.keys(keywordsDensity).map((keyword) => (\n                <Box padding={2} key={keyword}>\n                  <Badge>\n                    {`${keyword}:\n                      ${get(keywordsDensity[keyword], 'count', 0).toString()}`}\n                  </Badge>\n                </Box>\n              ))}\n            </Flex>\n          </Box>\n        )\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport isEqual from 'lodash/isEqual';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Box } from '@strapi/design-system';\n\nimport { SEOAccordion } from '../SEOAccordion';\nimport { SeoCheckerContext } from '../../Summary';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const StructuredDataCheck = ({ structuredData, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.structuredDataCheck.default'),\n      defaultMessage:\n        'A Structured Data json has been found! However we can validate the accuracy of its content.',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isEmpty(structuredData)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.structuredDataCheck.not-found'),\n          defaultMessage: 'No Structured Data json has been found.',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    }\n    if (!isEqual(status, checks.structuredData))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'structuredData' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.structured-data'),\n        defaultMessage: 'JSON Structured Data',\n      })}\n      status={checks.structuredData}\n      label={formatMessage({\n        id: getTrad('SEOChecks.structuredDataCheck.label'),\n        defaultMessage:\n          'Structured data is a standardized format for providing information about a page and classifying the page content.',\n      })}\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport isEqual from 'lodash/isEqual';\nimport isNull from 'lodash/isNull';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { Box, Flex, ProgressBar, Typography } from '@strapi/design-system';\n\nimport { SEOAccordion } from '../SEOAccordion';\nimport { SeoCheckerContext } from '../../Summary';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const MetaDescriptionCheck = ({ metaDescription, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  const maxLength = 160;\n  const minimumLength = 50;\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.metaDescriptionCheck.default'),\n      defaultMessage: 'A Meta Description has been found!',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    if (isNull(metaDescription) || isEmpty(metaDescription)) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.metaDescriptionCheck.not-found'),\n          defaultMessage: 'No Meta Description has been found.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    } else if (metaDescription.length > maxLength) {\n      status = {\n        message: formatMessage({\n          id: getTrad('Title-settings.metaDescription-too-long'),\n          defaultMessage: 'Meta Description is too long',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    } else if (metaDescription.length < minimumLength) {\n      status = {\n        message: formatMessage({\n          id: getTrad('Title-settings.metaDescription-too-short'),\n          defaultMessage: 'Meta Description is too short',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    }\n    if (!isEqual(status, checks.metaDescription))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'metaDescription' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.meta-description'),\n        defaultMessage: 'Meta description',\n      })}\n      status={checks.metaDescription}\n      label={formatMessage({\n        id: getTrad('Title-settings.metaDescription-tooltip'),\n        defaultMessage: `A meta description is an HTML tag used to describe the content of a web page.\\n This description appears below the title and URL of your page as it appears in search engine results.\\n For it to remain visible in Google, it must not exceed 140-${maxLength} characters.`,\n      })}\n      component={\n        metaDescription && (\n          <Box padding={4} background=\"neutral100\">\n            <Typography variant=\"omega\" fontWeight=\"semiBold\">\n              {metaDescription}\n            </Typography>\n            <Box paddingTop={2}>\n              <Flex horizontal spacing={2}>\n                <ProgressBar\n                  value={\n                    (metaDescription.length * 100) / maxLength > 100\n                      ? 100\n                      : (metaDescription.length * 100) / maxLength\n                  }\n                ></ProgressBar>\n                <Typography variant=\"pi\" padding={2}>\n                  ({metaDescription.length}/{maxLength})\n                </Typography>\n              </Flex>\n            </Box>\n          </Box>\n        )\n      }\n    />\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport isEqual from 'lodash/isEqual';\n\nimport { Box, Flex, Typography, Status } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\n\nimport { getTrad } from '../../../../../utils/getTrad';\n\nimport { SEOAccordion } from '../SEOAccordion';\n\nimport { SeoCheckerContext } from '../../Summary';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const AlternativeTextCheck = ({ intersections, richTextAlts, altTexts, checks }) => {\n  const { formatMessage } = useIntl();\n  const dispatch = React.useContext(SeoCheckerContext);\n\n  let status = {\n    message: formatMessage({\n      id: getTrad('SEOChecks.alternativeTextCheck.default'),\n      defaultMessage: 'All your images contain an alt attribute! Congrats!',\n    }),\n    qualityVerdict: qualityVerdict.good,\n  };\n\n  React.useEffect(() => {\n    const missingRichTextAlt = richTextAlts.filter((x) => x.occurences != 0).length;\n\n    if (intersections === 0) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.alternativeTextCheck.intersection-zero'),\n          defaultMessage:\n            'The name and the alternative text of your images are all the same. Strapi automatically generate the alt attribute from the name by default if the field was empty during the media upload. Having alt attribute clearly describing images is a very good practice.',\n        }),\n        qualityVerdict: qualityVerdict.bad,\n      };\n    } else if (altTexts.includes('')) {\n      const count = Math.abs(intersections);\n      status = {\n        message: `${count} ${formatMessage({\n          id: getTrad('SEOChecks.alternativeTextCheck.intersection-negative'),\n          defaultMessage: 'Some images from a media field are missing an alt attribute.',\n        })}`,\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    } else if (missingRichTextAlt >= 1) {\n      status = {\n        message: formatMessage({\n          id: getTrad('SEOChecks.alternativeTextCheck.richtext-missing-one'),\n          defaultMessage:\n            'At least one image in any 1st level richtext editor is missing an alt attribute.',\n        }),\n        qualityVerdict: qualityVerdict.improvements,\n      };\n    }\n    if (!isEqual(status, checks.alternativeText))\n      dispatch({\n        type: 'UPDATE_PONCTUAL',\n        value: { ...status, entity: 'alternativeText' },\n      });\n  }, []);\n\n  return (\n    <SEOAccordion\n      title={formatMessage({\n        id: getTrad('SEOModal.summary-title.alt-attributes'),\n        defaultMessage: 'Alternative Text',\n      })}\n      status={checks.alternativeText}\n      label={formatMessage({\n        id: getTrad('SEOChecks.alternativeTextCheck.label'),\n        defaultMessage:\n          'This will check if you have any missing alternative text for your images (media fields) and in your 1st level richtext editors.',\n      })}\n      component={\n        <Box padding={2} background=\"neutral100\">\n          <Flex spacing={2} horizontal padding={2}>\n            <WarningCircle aria-hidden={true} fill={`warning600`} />\n            <Typography paddingLeft={1}>\n              <Typography fontWeight=\"bold\">\n                {altTexts.filter((item) => item === '').length}{' '}\n              </Typography>\n              {formatMessage({\n                id: getTrad('SEOChecks.alternativeTextCheck.missing-image'),\n                defaultMessage: 'missing on first level image fields or inside a component.',\n              })}\n            </Typography>\n          </Flex>\n\n          {richTextAlts.map((alt, index) => (\n            <Flex key={index} spacing={2} horizontal padding={2}>\n              {alt.occurences > 0 && (\n                <>\n                  <WarningCircle aria-hidden={true} fill={`warning600`} />\n                  <Typography paddingLeft={1}>\n                    <Typography fontWeight=\"bold\">{alt.occurences} </Typography>\n                    {formatMessage({\n                      id: getTrad('SEOChecks.alternativeTextCheck.missing-text'),\n                      defaultMessage: 'missing alt in the following richtext field:',\n                    })}\n                    <Typography fontWeight=\"bold\"> {alt.field}</Typography>\n                  </Typography>\n                </>\n              )}\n            </Flex>\n          ))}\n          <Flex spacing={2} paddingTop={4} paddingLeft={2} paddingRight={2} paddingBottom={4}>\n            <Status variant=\"secondary\" showBullet={false}>\n              <Typography>\n                <Typography fontWeight=\"bold\">Tip: </Typography>\n                Implement a rule in your front-end code that uses the name of your images if the\n                <Typography fontWeight=\"bold\"> alternativeText </Typography>\n                field is empty to further reduce the risk of an empty alt attribute on your website.\n              </Typography>\n            </Status>\n          </Flex>\n        </Box>\n      }\n    />\n  );\n};\n","import isArray from 'lodash/isArray';\nimport last from 'lodash/last';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport pull from 'lodash/pull';\n\n// Utility function to collect fields based on a specific type (richtext, blocks, etc.)\nconst collectFieldsByType = (contentType, components, fieldType) => {\n  let fields = [];\n\n  // Collect fields from the content type\n  Object.entries(contentType.attributes).forEach(([field, fieldProperties]) => {\n    if (fieldProperties.type === fieldType) {\n      fields.push({ name: field, field: null });\n    } else if (fieldProperties.type === 'component') {\n      Object.entries(components[fieldProperties.component].attributes).forEach(\n        ([field2, fieldProperties2]) => {\n          if (fieldProperties2.type === fieldType) {\n            fields.push({ name: field, field: field2 });\n          }\n        }\n      );\n    }\n  });\n\n  // Collect fields from components\n  Object.entries(components).forEach(([componentName, componentData]) => {\n    Object.entries(componentData.attributes).forEach(([field, fieldProperties]) => {\n      if (fieldProperties.type === fieldType) {\n        fields.push({ name: componentName, field });\n      }\n    });\n  });\n\n  return fields;\n};\n\n// Function to retrieve both richtext and blocks fields from a content-type\nexport const getRichTextAndBlocksFields = (contentType, components, modifiedData) => {\n  let dynamicZones = [];\n\n  // Collect dynamic zones from the content-type\n  Object.entries(modifiedData).forEach(([fieldName, fieldValue]) => {\n    if (isArray(fieldValue)) {\n      const isComponentField = fieldValue.some((subField) => '__component' in subField);\n      if (isComponentField) dynamicZones.push(fieldName);\n    }\n  });\n\n  // Collect richtext fields and blocks fields\n  let richTextFields = collectFieldsByType(contentType, components, 'richtext');\n  let blockFields = collectFieldsByType(contentType, components, 'blocks');\n\n  // Remove fields not present in modified data or dynamic zones\n  const filterFields = (fields) => {\n    dynamicZones.forEach((dz) => {\n      const dynamicZoneData = get(modifiedData, dz, []);\n\n      fields.forEach((field, index) => {\n        const componentExistsInDZ = dynamicZoneData.filter((x) => x.__component === field.name);\n\n        // If the component is in the dynamic zone but not marked as such, associate it\n        if (!isEmpty(componentExistsInDZ) && !field.inDz && dynamicZoneData.find((x) => x.hasOwnProperty(field.field))) {\n          fields[index] = { ...field, inDz: dz };\n        }\n\n        // If the component is not in the dynamic zone but is marked as being inside, remove it\n        if (isEmpty(componentExistsInDZ) && field.inDz) {\n          pull(fields, field);\n        }\n      });\n    });\n  };\n\n  // Filter both richtext and blocks fields\n  filterFields(richTextFields);\n  filterFields(blockFields);\n\n  return { richTextFields, blockFields };\n};\n","import isNull from 'lodash/isNull';\n\n/**\n * Recursively searches through an object to find specific keyword matches and collect relevant data.\n * @param {Object} obj - The object to search through.\n * @param {string} keyword - The keyword to search for (e.g., 'alternativeText').\n * @param {Array} relations - Fields to exclude from the recursive search (e.g., relations).\n * @param {Array} results - Accumulator for matching keyword values (default: empty array).\n * @param {Array} allImageNames - Accumulator for associated image names (default: empty array).\n * @returns {Object} - An object containing arrays of alternativeTexts and imageNames.\n */\nconst recursiveSearch = (obj, keyword, relations, results = [], allImageNames = []) => {\n  // Arrays to store found alternativeTexts and imageNames\n  const alternativeTexts = results;\n  const imageNames = allImageNames;\n\n  // Iterate through the object keys\n  Object.keys(obj).forEach((key) => {\n    const value = obj[key];\n\n    // Check if the key matches the keyword and its value is not an object\n    if (key === keyword && typeof value !== 'object') {\n      alternativeTexts.push(value); // Store the alternative text\n      imageNames.push(obj['name']); // Store the associated image name\n    }\n    // Recursively search in nested objects, ignoring relations and null values\n    else if (typeof value === 'object' && !relations.includes(key) && !isNull(value)) {\n      recursiveSearch(value, keyword, relations, alternativeTexts, imageNames);\n    }\n  });\n\n  // Return the collected alternative texts and image names\n  return { alternativeTexts, imageNames };\n};\n\n/**\n * Extracts alternative texts and image names from the content, excluding relations.\n * @param {Object} contentType - The content type structure to determine relations.\n * @param {Object} modifiedData - The actual content data to search through.\n * @returns {Object} - Contains the count of alternative texts and intersections.\n */\nexport const getRegularImageAltTexts = (contentType, modifiedData) => {\n  // Relations to exclude from the recursive search (default: localizations)\n  const relations = ['localizations'];\n\n  // Identify relation fields from the contentType and add them to the exclusion list\n  Object.keys(contentType.attributes).forEach((field) => {\n    if (contentType.attributes[field].type === 'relation') {\n      relations.push(field);\n    }\n  });\n\n  // Perform the recursive search to find alternative texts and image names\n  const { alternativeTexts, imageNames } = recursiveSearch(\n    modifiedData,\n    'alternativeText',\n    relations\n  );\n\n  // Count the number of alternative texts found\n  const alternativeTextCount = alternativeTexts.length;\n\n  // Calculate intersections (images whose names appear in the alternative texts)\n  const intersections =\n    alternativeTexts.filter((altText) => imageNames.includes(altText)).length -\n    alternativeTextCount;\n\n  // Return the intersection count and the collected alternative texts\n  return { intersections, altTexts: alternativeTexts };\n};\n","import get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isNull from 'lodash/isNull';\nimport isArray from 'lodash/isArray';\nimport showdown from 'showdown';\n\nimport { getRichTextAndBlocksFields } from './getRichTextAndBlocksFields';\nimport { getRegularImageAltTexts } from './getRegularImageAltTexts';\n\n// Initialize the markdown to HTML converter\nconst converter = new showdown.Converter();\n\n/**\n * Recursive function to extract text from block fields.\n * @param {Array} blocks - The block field array containing rich content.\n * @returns {string} - Extracted text content.\n */\nconst extractTextFromBlocks = (blocks) => {\n  let textContent = '';\n\n  blocks.forEach((block) => {\n    if (block.type === 'text' && block.text) {\n      textContent += `${block.text} `;\n    } else if (block.children && isArray(block.children)) {\n      // Recursively extract text from children\n      textContent += extractTextFromBlocks(block.children);\n    }\n  });\n\n  return textContent.trim();\n};\n\n/**\n * Function to count the occurrences of images with empty alt texts in richtext content.\n * @param {string} richtext - The richtext content (Markdown or HTML).\n * @param {string} field - The field name being analyzed.\n * @returns {Object} - The count of images without alt text.\n */\nconst getEmptyAltCount = (richtext, field, name, isBlock = false) => {\n  let htmlOccurrences = 0;\n  let markdownOccurrences = 0;\n  let blockOccurences = 0;\n\n  if (isBlock && richtext) {\n    richtext.forEach((element) => {\n      // Check if the current element is an image and has the 'image' field\n\n      if (element.type === 'image' && element.image) {\n        if (!element.image.alternativeText) {\n          blockOccurences += 1; // Increment if alternativeText is missing or empty\n        }\n      }\n    });\n  } else if (richtext) {\n    // Count markdown-style empty alt texts\n    markdownOccurrences = richtext.split('\\n').filter((entry) => entry.includes('![](')).length;\n\n    // Count HTML-style empty alt texts\n    const htmlImages = richtext.match(/<img[^>]*\\/?>/g) || [];\n    htmlOccurrences = htmlImages.filter((image) => !image.includes('alt=')).length;\n  }\n\n  if (name) {\n    if (name.includes('.')) {\n      return {\n        field: `[dynamic-zone].${name.split('.').pop()}.${field}`,\n        occurences: markdownOccurrences + htmlOccurrences + blockOccurences,\n      };\n    }\n    return {\n      field: `${name}.${field}`,\n      occurences: markdownOccurrences + htmlOccurrences + blockOccurences,\n    };\n  }\n  return { field, occurences: 0 };\n};\n\n/**\n * Function to process the text in richtext and block fields, counting words and identifying empty alt texts.\n * @param {Object} base - The object containing the richtext or block data.\n * @param {string} field - The field name being analyzed.\n * @param {boolean} isBlock - Flag to check if the field is a block field.\n * @returns {Object} - Contains word array, word count, and empty alt text count.\n */\nconst increaseCounter = (base, field, isBlock = false, name = null) => {\n  let richtext = '';\n  let emptyAlts = {};\n\n  if (isBlock) {\n    // Extract text from blocks if it's a block field\n    richtext = extractTextFromBlocks(base?.[field] ?? []);\n    emptyAlts = getEmptyAltCount(base?.[field], field, name, true);\n  } else {\n    // Handle regular richtext/Markdown fields\n    richtext = base?.[field] ?? '';\n    emptyAlts = getEmptyAltCount(richtext, field, name);\n  }\n\n  // Check for empty alt text occurrences in the richtext\n\n  if (richtext) {\n    // Convert markdown to HTML (only for non-block fields)\n    const html = isBlock ? richtext : converter.makeHtml(richtext);\n\n    // Extract words by removing HTML tags and splitting by spaces\n    const words = html\n      .replace(/<\\/?[^>]+(>|$)/g, '')\n      .replace('\\n', ' ')\n      .toLowerCase()\n      .split(' ')\n      .filter((entry) => entry !== '' && entry !== '\\n'); // Remove empty entries\n\n    return { words, length: words.length, emptyAlts };\n  }\n\n  return { words: [], length: 0, emptyAlts };\n};\n\n/**\n * Function to build the keyword density object.\n * @param {Array} keywords - List of keywords to analyze.\n * @param {Array} words - Array of words from the richtext fields.\n */\nconst buildKeywordDensityObject = (keywords, words, keywordsDensity) => {\n  // Initialize tempKeywordsDensity based on the provided keywordsDensity\n  let tempKeywordsDensity = { ...keywordsDensity };\n\n  // Iterate through each keyword and update the density object\n  keywords.forEach((keyword) => {\n    if (!isEmpty(keyword)) {\n      const trimmedKeyword = keyword.trim();\n      const regex = new RegExp(trimmedKeyword.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g'); // Escape special chars in keyword\n      const count = (words.join(' ').match(regex) || []).length;\n\n      // Update the keyword density object\n      if (!tempKeywordsDensity.hasOwnProperty(trimmedKeyword)) {\n        tempKeywordsDensity[trimmedKeyword] = { count };\n      } else {\n        tempKeywordsDensity[trimmedKeyword].count += count;\n      }\n    }\n  });\n\n  return tempKeywordsDensity;\n};\n\nconst adjustIntersections = (data) => {\n  // Destructure the emptyAltCount from the input object\n  const { emptyAltCount } = data;\n\n  // Initialize a counter for the total number of occurrences\n  let occurrences = 0;\n\n  // Count the total occurrences from richTextAlts\n  emptyAltCount.richTextAlts.forEach((alt) => {\n    occurrences += alt.occurences;\n  });\n\n  // Count the total occurrences from blockTextAlts\n  emptyAltCount.blockTextAlts.forEach((alt) => {\n    occurrences += alt.occurences;\n  });\n\n  // Decrease the intersections value by the total number of occurrences\n  emptyAltCount.intersections -= occurrences;\n\n  // Return the modified data object\n  return data;\n};\n\n/**\n * Main function to retrieve richtext and block field data and calculate word count and keyword density.\n * @param {Object} modifiedData - The modified content data.\n * @param {Object} components - The components used in the content type.\n * @param {Object} contentType - The content type definition.\n * @returns {Object} - Contains word count and keyword density.\n */\nconst getRichTextData = (modifiedData, components, contentType) => {\n  // Retrieve richtext and block fields\n  const { richTextFields, blockFields } = getRichTextAndBlocksFields(\n    contentType,\n    components,\n    modifiedData\n  );\n\n  const { intersections, altTexts } = getRegularImageAltTexts(contentType, modifiedData);\n\n  let emptyAltCount = { intersections, richTextAlts: [], blockTextAlts: [], altTexts };\n\n  // Track word count and keywords\n  let wordCount = 0;\n  let keywords = [];\n  let keywordsDensity = {};\n\n  // Extract keywords from SEO metadata\n  const seoKeywords = modifiedData?.seo?.keywords ?? '';\n  if (seoKeywords) {\n    keywords = seoKeywords.toLowerCase().split(','); // Split keywords by commas\n  }\n\n  // Process each richtext field to calculate word count and keyword density\n  richTextFields.forEach((data) => {\n    // Handle first-level richtext fields (e.g., not inside components or dynamic zones)\n    if (isNull(data.field)) {\n      const { words, length, emptyAlts } = increaseCounter(modifiedData, data.name);\n      wordCount += length; // Add to total word count\n      emptyAltCount.richTextAlts.push(emptyAlts);\n      keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity); // Update keyword densi, keywordsDensityty\n    }\n\n    // Handle non-repeatable components that contain richtext\n    else if (!data.inDz) {\n      const item = get(modifiedData, data.name.split('.').pop(), '');\n      if (item) {\n        const isRepeatable = isArray(item);\n\n        if (isRepeatable) {\n          // Process each repeatable entry\n          item.forEach((entry) => {\n            const { words, length, emptyAlts } = increaseCounter(\n              entry,\n              data.field,\n              false,\n              data.name\n            );\n            wordCount += length;\n            emptyAltCount.richTextAlts.push(emptyAlts);\n            keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n          });\n        } else {\n          const { words, length, emptyAlts } = increaseCounter(item, data.field, false, data.name);\n          wordCount += length;\n          emptyAltCount.richTextAlts.push(emptyAlts);\n          keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n        }\n      }\n    }\n\n    // Handle dynamic zones containing richtext fields\n    else {\n      const components = get(modifiedData, data.inDz, []);\n      if (!isEmpty(components)) {\n        const richTextComponents = components.filter((x) => x.__component === data.name);\n\n        richTextComponents.forEach((component) => {\n          const item = get(component, data.field, []);\n          const isRepeatable = isArray(item);\n\n          if (isRepeatable) {\n            item.forEach((entry) => {\n              const { words, length, emptyAlts } = increaseCounter(\n                entry,\n                data.field,\n                false,\n                data.name\n              );\n              wordCount += length;\n              emptyAltCount.richTextAlts.push(emptyAlts);\n              keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n            });\n          } else {\n            const { words, length, emptyAlts } = increaseCounter(\n              component,\n              data.field,\n              false,\n              data.name\n            );\n            wordCount += length;\n            emptyAltCount.richTextAlts.push(emptyAlts);\n            keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n          }\n        });\n      }\n    }\n  });\n\n  blockFields.forEach((data) => {\n    // Handle first-level blocks fields (e.g., not inside components or dynamic zones)\n    if (isNull(data.field)) {\n      const { words, length, emptyAlts } = increaseCounter(modifiedData, data.name, true);\n      wordCount += length; // Add to total word count\n      emptyAltCount.blockTextAlts.push(emptyAlts);\n      keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity); // Update keyword densi, keywordsDensityty\n    }\n\n    // Handle non-repeatable components that contain blocks\n    else if (!data.inDz) {\n      const item = get(modifiedData, data.name.split('.').pop(), '');\n      if (item) {\n        const isRepeatable = isArray(item);\n\n        if (isRepeatable) {\n          // Process each repeatable entry\n          item.forEach((entry) => {\n            const { words, length, emptyAlts } = increaseCounter(\n              entry,\n              data.field,\n              true,\n              data.name\n            );\n            wordCount += length;\n            emptyAltCount.blockTextAlts.push(emptyAlts);\n            keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n          });\n        } else {\n          const { words, length, emptyAlts } = increaseCounter(item, data.field, true, data.name);\n          wordCount += length;\n          emptyAltCount.blockTextAlts.push(emptyAlts);\n          keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n        }\n      }\n    }\n\n    // Handle dynamic zones containing blocks fields\n    else {\n      const components = get(modifiedData, data.inDz, []);\n      if (!isEmpty(components)) {\n        const blockComponents = components.filter((x) => x.__component === data.name);\n\n        blockComponents.forEach((component) => {\n          const item = get(component, data.field, []);\n          const isRepeatable = isArray(item);\n\n          if (isRepeatable) {\n            item.forEach((entry) => {\n              const { words, length, emptyAlts } = increaseCounter(\n                entry,\n                data.field,\n                true,\n                data.name\n              );\n              wordCount += length;\n              emptyAltCount.blockTextAlts.push(emptyAlts);\n              keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n            });\n          } else {\n            const { words, length, emptyAlts } = increaseCounter(\n              component,\n              data.field,\n              true,\n              data.name\n            );\n            wordCount += length;\n            emptyAltCount.blockTextAlts.push(emptyAlts);\n            keywordsDensity = buildKeywordDensityObject(keywords, words, keywordsDensity);\n          }\n        });\n      }\n    }\n  });\n  return adjustIntersections({\n    wordCount,\n    keywordsDensity,\n    emptyAltCount,\n  });\n};\n\nexport { getRichTextData };\n","import * as React from 'react';\n\nimport { Box, Typography, EmptyStateLayout, Modal } from '@strapi/design-system';\n\nimport { Illo } from '../../../HomePage/Main/EmptyComponentLayout/illo';\n\nimport { MetaRobotCheck } from './MetaRobotCheck';\nimport { WordCountCheck } from './WordCountCheck';\nimport { MetaTitleCheck } from './MetaTitleCheck';\nimport { OpenGraphCheck } from './OpenGraphCheck';\nimport { CanonicalUrlCheck } from './CanonicalUrlCheck';\nimport { LastUpdatedAtCheck } from './LastUpdatedAtCheck';\nimport { KeywordDensityCheck } from './KeywordDensityCheck';\nimport { StructuredDataCheck } from './StructuredDataCheck';\nimport { MetaDescriptionCheck } from './MetaDescriptionCheck';\nimport { AlternativeTextCheck } from './AlternativeTextCheck';\n\nimport { getRichTextData } from '../../utils/getRichTextData';\n\nimport { useIntl } from 'react-intl';\nimport { getTrad } from '../../../../utils/getTrad';\n\nexport const SeoChecks = ({ updatedAt, modifiedData, components, contentType, checks }) => {\n  const { formatMessage } = useIntl();\n\n  const { wordCount, keywordsDensity, emptyAltCount } = getRichTextData(\n    modifiedData,\n    components,\n    contentType\n  );\n\n  const seo = modifiedData?.seo ?? null;\n  const hasSeo = seo && Object.keys(seo).length > 0;\n\n  return (\n    <Modal.Content labelledBy=\"title\">\n      <Modal.Header>\n        <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"title\">\n          {formatMessage({\n            id: getTrad('Button.seo-analyze'),\n            defaultMessage: 'SEO Analyze',\n          })}\n        </Typography>\n      </Modal.Header>\n      <Modal.Body>\n        {hasSeo ? (\n          <Box>\n            {checks?.metaTitle && (\n              <MetaTitleCheck metaTitle={seo?.metaTitle ?? null} checks={checks} />\n            )}\n            {checks?.metaDescription && (\n              <MetaDescriptionCheck\n                metaDescription={seo?.metaDescription ?? null}\n                checks={checks}\n              />\n            )}\n            {checks?.wordCount && <WordCountCheck wordCount={wordCount} checks={checks} />}\n            {checks?.keywordsDensity && (\n              <KeywordDensityCheck keywordsDensity={keywordsDensity} checks={checks} />\n            )}\n            {checks?.openGraph && (\n              <OpenGraphCheck openGraph={seo?.openGraph ?? null} checks={checks} />\n            )}\n            {checks?.canonicalUrl && (\n              <CanonicalUrlCheck canonicalUrl={seo?.canonicalURL ?? null} checks={checks} />\n            )}\n            {checks?.structuredData && (\n              <StructuredDataCheck structuredData={seo?.structuredData ?? null} checks={checks} />\n            )}\n            {checks?.metaRobots && (\n              <MetaRobotCheck metaRobots={seo?.metaRobots ?? null} checks={checks} />\n            )}\n            {checks?.alternativeText && (\n              <AlternativeTextCheck\n                intersections={emptyAltCount?.intersections ?? null}\n                richTextAlts={emptyAltCount?.richTextAlts ?? null}\n                altTexts={emptyAltCount?.altTexts ?? null}\n                checks={checks}\n              />\n            )}\n            {checks?.lastUpdatedAt && <LastUpdatedAtCheck updatedAt={updatedAt} checks={checks} />}\n          </Box>\n        ) : (\n          <Box paddingLeft={4}>\n            <EmptyStateLayout\n              icon={<Illo />}\n              content={formatMessage({\n                id: getTrad('Modal.seo-component-empty'),\n                defaultMessage: 'Your SEO component is empty...',\n              })}\n            />\n          </Box>\n        )}\n      </Modal.Body>\n    </Modal.Content>\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Box, Flex, Typography } from '@strapi/design-system';\nimport { CheckCircle, CrossCircle, WarningCircle } from '@strapi/icons';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { qualityVerdict } from '../../../utils/checks';\n\nexport const PreviewChecks = ({ checks }) => {\n  const { formatMessage } = useIntl();\n\n  const good = Object.values(checks).filter(\n    (check) => check.qualityVerdict === qualityVerdict.good\n  ).length;\n  const improvements = Object.values(checks).filter(\n    (check) => check.qualityVerdict === qualityVerdict.improvements\n  ).length;\n  const bad = Object.values(checks).filter(\n    (check) => check.qualityVerdict === qualityVerdict.bad\n  ).length;\n\n  return (\n    <Box paddingTop={2}>\n      <Flex gap={2} key={qualityVerdict.good}>\n        <CheckCircle aria-hidden={true} fill={`success600`} />\n        <Typography>\n          {formatMessage({\n            id: getTrad('Good'),\n            defaultMessage: 'Good',\n          })}\n          {`: ${good}`}\n        </Typography>\n      </Flex>\n      <Flex gap={2} key={qualityVerdict.improvements}>\n        <WarningCircle aria-hidden={true} fill={`warning600`} />\n        <Typography>\n          {formatMessage({\n            id: getTrad('Improvements'),\n            defaultMessage: 'Improvements',\n          })}\n          {`: ${improvements}`}\n        </Typography>\n      </Flex>\n      <Flex gap={2} key={qualityVerdict.bad}>\n        <CrossCircle aria-hidden={true} fill={`danger600`} />\n        <Typography>\n          {formatMessage({\n            id: getTrad('Bad'),\n            defaultMessage: 'Bad',\n          })}\n          {`: ${bad}`}\n        </Typography>\n      </Flex>\n    </Box>\n  );\n};\n","import { Box, Typography, Flex } from '@strapi/design-system';\n\nexport const Serp = ({ metaTitle, metaDescription }) => {\n  const metaTitleToDisplay =\n    metaTitle.length > 60 ? `${metaTitle.substring(0, 56)} ...` : metaTitle;\n  const metaDescriptionToDisplay =\n    metaDescription.length > 160 ? `${metaDescription.substring(0, 156)} ...` : metaDescription;\n\n  return (\n    <Box padding={4} background=\"neutral100\" width={\"580px\"}>\n      <Typography variant=\"beta\" textColor=\"primary600\">\n        {metaTitleToDisplay}\n      </Typography>\n      <Flex marginTop={1}>\n        <Typography variant=\"pi\" textColor=\"neutral600\">\n          {metaDescriptionToDisplay}\n        </Typography>\n      </Flex>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nimport { Flex, Typography } from '@strapi/design-system';\nimport { CheckCircle, WarningCircle } from '@strapi/icons';\n\nexport const MetaChecks = ({ item, max, label, minLimit = false }) => {\n  const getIcon = () => {\n    if (\n      item.length >= max ||\n      (label === 'title' && item.length === 0) ||\n      (minLimit && label === 'description' && item.length <= 50)\n    ) {\n      return <WarningCircle aria-hidden={true} fill={`warning600`} />;\n    } else {\n      return <CheckCircle aria-hidden={true} fill={`success600`} />;\n    }\n  };\n  return (\n    <Flex spacing={1} horizontal>\n      {getIcon()}\n      <Typography>{`Your ${label} is ${item.length || 0} characters long (max ${max})`}</Typography>\n    </Flex>\n  );\n};\n","import * as React from 'react';\n\nimport { Flex, Typography } from '@strapi/design-system';\nimport { CheckCircle, WarningCircle } from '@strapi/icons';\n\nexport const KeywordCheck = ({ item, keywords, label }) => {\n  const _keywords = keywords.split(',');\n  const matches = _keywords.filter((x) => item.toLowerCase().includes(x.toLowerCase().trim()));\n\n  const getIcon = () => {\n    if (matches.length === 0) {\n      return <WarningCircle aria-hidden={true} fill={`warning600`} />;\n    } else {\n      return <CheckCircle aria-hidden={true} fill={`success600`} />;\n    }\n  };\n\n  return (\n    <Flex spacing={1} horizontal>\n      {getIcon()}\n      <Typography>{`You use ${matches.length} keyword${\n        matches.length > 1 ? 's' : ''\n      } in your ${label} (${matches.join(', ').trim()})`}</Typography>\n    </Flex>\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport get from 'lodash/get';\n\nimport { Box, Flex, Divider, Typography, EmptyStateLayout, Modal } from '@strapi/design-system';\n\nimport { Serp } from './Serp';\nimport { MetaChecks } from './MetaChecks';\nimport { KeywordCheck } from './KeywordCheck';\n\nimport { Illo } from '../../../../HomePage/Main/EmptyComponentLayout/illo';\n\nimport { getTrad } from '../../../../../utils/getTrad';\n\nexport const BrowserPreview = ({ modifiedData }) => {\n  const { formatMessage } = useIntl();\n\n  const seo = get(modifiedData, 'seo', null);\n  const metaTitle = get(seo, 'metaTitle', null);\n  const metaDescription = get(seo, 'metaDescription', null);\n  const keywords = get(seo, 'keywords', null);\n\n  return (\n    <Modal.Content labelledBy=\"title\">\n      <Modal.Header>\n        <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"title\">\n          {formatMessage({\n            id: getTrad('Button.browser-preview'),\n            defaultMessage: 'Browser Preview',\n          })}\n        </Typography>\n      </Modal.Header>\n      <Modal.Body>\n        {seo ? (\n          <Flex direction=\"column\" gap={2} alignItems=\"flex-start\">\n            {metaTitle && metaDescription && (\n              <Box paddingBottom={6}>\n                <Serp metaTitle={metaTitle} metaDescription={metaDescription} />\n              </Box>\n            )}\n\n            <Divider marginBottom={4} width=\"100%\" />\n\n            {metaTitle && <MetaChecks item={metaTitle} max={60} label=\"title\" />}\n            {metaDescription && (\n              <MetaChecks item={metaDescription} max={160} label=\"description\" minLimit={true} />\n            )}\n            {keywords && (\n              <React.Fragment>\n                {metaTitle && <KeywordCheck item={metaTitle} keywords={keywords} label=\"title\" />}\n\n                {metaDescription && (\n                  <KeywordCheck item={metaDescription} keywords={keywords} label=\"description\" />\n                )}\n              </React.Fragment>\n            )}\n          </Flex>\n        ) : (\n          <Box paddingLeft={4}>\n            <EmptyStateLayout\n              icon={<Illo />}\n              content={formatMessage({\n                id: getTrad('Modal.seo-component-empty'),\n                defaultMessage: 'Your SEO component is empty...',\n              })}\n            />\n          </Box>\n        )}\n      </Modal.Body>\n    </Modal.Content>\n  );\n};\n","import * as React from 'react';\n\nexport const FacebookOGPreview = ({ image, title, description }) => {\n  return (\n    <div\n      style={{\n        width: '500px',\n        border: '1px solid #dadde1',\n        fontFamily: 'Helvetica, Arial, sans-serif',\n        cursor: 'pointer',\n        margin: 'auto',\n        marginBottom: '40px',\n      }}\n    >\n      {/* Image section */}\n      <div\n        style={{\n          borderBottom: '1px solid #dadde1',\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      >\n        <div style={{ width: '100%', position: 'relative', paddingTop: '52.5%' }}>\n          <img\n            src={image.url}\n            alt={title}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover',\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Text section */}\n      <div style={{ backgroundColor: '#f2f3f5', padding: '12px 10px', lineHeight: '1.4' }}>\n        {/* Site name */}\n        <div\n          style={{\n            fontSize: '12px',\n            textTransform: 'uppercase',\n            color: '#606770',\n            marginBottom: '4px',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          your-site.io\n        </div>\n\n        {/* Title */}\n        <div\n          style={{\n            fontSize: '16px',\n            fontWeight: 'bold',\n            color: '#1d2129',\n            marginBottom: '4px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {title.substring(0, 65)}\n        </div>\n\n        {/* Description */}\n        <div\n          style={{\n            fontSize: '14px',\n            color: '#606770',\n            maxHeight: '40px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            WebkitLineClamp: 2,\n            WebkitBoxOrient: 'vertical',\n            display: '-webkit-box',\n          }}\n        >\n          {description.substring(0, 150)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\n\nexport const TwitterOGPreview = ({ image, title, description }) => {\n  return (\n    <div\n      style={{\n        width: '100%',\n        maxWidth: '500px',\n        border: '1px solid #e1e8ed',\n        fontFamily: 'Arial, sans-serif',\n        borderRadius: '8px',\n        overflow: 'hidden',\n        cursor: 'pointer',\n        margin: 'auto',\n        marginBottom: '40px',\n      }}\n    >\n      {/* Image section */}\n      <div\n        style={{\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n        }}\n      >\n        <div style={{ width: '100%', position: 'relative', paddingTop: '52.5%' }}>\n          <img\n            src={image.url}\n            alt={title}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover',\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Content section */}\n      <div\n        style={{\n          backgroundColor: '#ffffff',\n          padding: '12px 10px',\n          lineHeight: '1.4',\n          borderTop: '1px solid #e1e8ed',\n        }}\n      >\n        {/* Site name */}\n        <div\n          style={{\n            fontSize: '12px',\n            color: '#657786',\n            marginBottom: '4px',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          your-site.io\n        </div>\n\n        {/* Title */}\n        <div\n          style={{\n            fontSize: '16px',\n            fontWeight: 'bold',\n            color: '#14171A',\n            marginBottom: '4px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {title.substring(0, 70)}\n        </div>\n\n        {/* Description */}\n        <div\n          style={{\n            fontSize: '14px',\n            color: '#657786',\n            maxHeight: '40px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            WebkitLineClamp: 2,\n            WebkitBoxOrient: 'vertical',\n            display: '-webkit-box',\n          }}\n        >\n          {description.substring(0, 200)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\n\nexport const LinkedInOGPreview = ({ image, title, description }) => {\n  return (\n    <div\n      style={{\n        width: '100%',\n        maxWidth: '500px',\n        borderRadius: '2px',\n        boxShadow: '0 0 0 1px rgba(0,0,0,.15),0 2px 3px rgba(0,0,0,.2)',\n        fontFamily: 'Arial, sans-serif',\n        overflow: 'hidden',\n        cursor: 'pointer',\n        margin: 'auto',\n        marginBottom: '40px',\n      }}\n    >\n      {/* Image section */}\n      <div\n        style={{\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n          backgroundRepeat: 'no-repeat',\n        }}\n      >\n        <div style={{ width: '100%', position: 'relative', paddingTop: '52.5%' }}>\n          <img\n            src={image.url}\n            alt={title}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '100%',\n              objectFit: 'cover',\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Content section */}\n      <div\n        style={{\n          backgroundColor: '#ffffff',\n          padding: '12px 16px',\n          lineHeight: '1.5',\n          borderTop: '1px solid #ccd0d5',\n        }}\n      >\n        {/* Title */}\n        <div\n          style={{\n            fontSize: '18px',\n            fontWeight: 'bold',\n            color: '#333333',\n            marginBottom: '2px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n          }}\n        >\n          {title.substring(0, 70)}\n        </div>\n\n        {/* Site name */}\n        <div\n          style={{\n            fontSize: '12px',\n            color: '#666666',\n            marginBottom: '4px',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n          }}\n        >\n          your-site.io\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { Badge, Box, EmptyStateLayout, Flex, Modal, Typography } from '@strapi/design-system';\n\nimport { Illo } from '../../../../HomePage/Main/EmptyComponentLayout/illo';\n\nimport { getTrad } from '../../../../../utils/getTrad';\nimport { FacebookOGPreview } from './Facebook/index';\nimport { TwitterOGPreview } from './X/index';\nimport { LinkedInOGPreview } from './LinkedIn/index';\n\nexport const OpenGraphPreview = ({ modifiedData }) => {\n  const { formatMessage } = useIntl();\n\n  const { openGraph } = modifiedData?.seo;\n\n  return (\n    <Modal.Content labelledBy=\"title\">\n      <Modal.Header>\n        <Typography fontWeight=\"bold\" textColor=\"neutral800\" as=\"h2\" id=\"title\">\n          {formatMessage({\n            id: getTrad('Button.open-graph-preview'),\n            defaultMessage: 'Open Graph Preview',\n          })}\n        </Typography>\n      </Modal.Header>\n      <Modal.Body>\n        {openGraph['ogTitle'] && openGraph['ogDescription'] && openGraph['ogImage'] ? (\n          <>\n            <Flex alignItems=\"left\" direction=\"column\" gap={2}>\n              <Flex gap={1}>\n                <Badge backgroundColor=\"neutral150\" textColor=\"neutral600\">\n                  Facebook\n                </Badge>\n              </Flex>\n            </Flex>\n            <FacebookOGPreview\n              title={openGraph['ogTitle']}\n              description={openGraph['ogDescription']}\n              image={openGraph['ogImage']}\n            />\n            <Flex alignItems=\"left\" direction=\"column\" gap={2}>\n              <Flex gap={1}>\n                <Badge backgroundColor=\"neutral150\" textColor=\"neutral600\">\n                  X (Twitter)\n                </Badge>\n              </Flex>\n            </Flex>\n            <TwitterOGPreview\n              title={openGraph['ogTitle']}\n              description={openGraph['ogDescription']}\n              image={openGraph['ogImage']}\n            />\n            <Flex alignItems=\"left\" direction=\"column\" gap={2}>\n              <Flex gap={1}>\n                <Badge backgroundColor=\"neutral150\" textColor=\"neutral600\">\n                  LinkedIn\n                </Badge>\n              </Flex>\n            </Flex>\n            <LinkedInOGPreview\n              title={openGraph['ogTitle']}\n              description={openGraph['ogDescription']}\n              image={openGraph['ogImage']}\n            />\n          </>\n        ) : (\n          <Box paddingLeft={4}>\n            <EmptyStateLayout\n              icon={<Illo />}\n              content={formatMessage({\n                id: getTrad('Modal.seo-component-empty-open-graph'),\n                defaultMessage: 'The Open Graph metadata is empty...',\n              })}\n            />\n          </Box>\n        )}\n      </Modal.Body>\n    </Modal.Content>\n  );\n};\n","import { useFetchClient } from '@strapi/strapi/admin';\n\nexport const useSettingsApi = () => {\n  const { get, post } = useFetchClient();\n\n  const getSettings = async () => {\n    const resultData = await get('/seo/settings');\n\n    return resultData;\n  };\n\n  const setSettings = async (data) => {\n    const resultData = await post('/seo/settings', data);\n\n    return resultData;\n  };\n\n  return { getSettings, setSettings };\n};\n","import * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport {\n  unstable_useContentManagerContext as useContentManagerContext,\n  unstable_useDocument as useDocument,\n} from '@strapi/strapi/admin';\nimport { Box, Button, Typography, TextButton, Modal } from '@strapi/design-system';\nimport { Eye, ArrowRight } from '@strapi/icons';\n\nimport { reducer } from './reducer';\n\nimport { SeoChecks } from '../SeoChecks';\nimport { PreviewChecks } from './PreviewChecks';\nimport { BrowserPreview } from './BrowserPreview';\nimport { OpenGraphPreview } from './OpenGraphPreview';\n\nimport { getTrad } from '../../../../utils/getTrad';\nimport { useSettingsApi } from '../../../../hooks/useSettingsApi';\nimport { getRichTextData } from '../../utils/getRichTextData';\nimport {\n  canonicalUrlPreview,\n  getAlternativeTextPreview,\n  getKeywordDensityPreview,\n  getMetaDescriptionPreview,\n  getMetaTitleCheckPreview,\n  getWordCountPreview,\n  lastUpdatedAtPreview,\n  metaRobotPreview,\n  openGraphPreview,\n  structuredDataPreview,\n} from '../../utils/checks';\n\nconst initialState = {\n  preview: true,\n};\n\nexport const SeoCheckerContext = React.createContext(null);\n\nexport const Summary = () => {\n  const { formatMessage } = useIntl();\n  const { getSettings } = useSettingsApi();\n\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [localChecks, setLocalChecks] = React.useState({});\n  const [checks, dispatch] = React.useReducer(reducer, initialState);\n\n  const { model, collectionType, id, form, contentType, components } = useContentManagerContext();\n  const { values: modifiedData } = form;\n\n  const { metaTitle, metaDescription, openGraph } = modifiedData.seo;\n\n  const { document } = useDocument({\n    model,\n    collectionType,\n    documentId: id,\n  });\n\n  const getAllChecks = async (modifiedData, components, contentType) => {\n    const { data: defaultSettings } = await getSettings();\n\n    const { wordCount, keywordsDensity, emptyAltCount } = getRichTextData(\n      modifiedData,\n      components,\n      contentType\n    );\n\n    let result = {\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.metaTitle && {\n        metaTitle: getMetaTitleCheckPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.wordCount && {\n        wordCount: getWordCountPreview(wordCount),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.metaRobots && {\n        metaRobots: metaRobotPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.openGraph && {\n        openGraph: openGraphPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.canonicalUrl && {\n        canonicalUrl: canonicalUrlPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.lastUpdatedAt && {\n        lastUpdatedAt: lastUpdatedAtPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.structuredData && {\n        structuredData: structuredDataPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.metaDescription && {\n        metaDescription: getMetaDescriptionPreview(modifiedData),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.alternativeText && {\n        alternativeText: getAlternativeTextPreview(emptyAltCount),\n      }),\n      ...(defaultSettings[contentType?.uid]?.seoChecks?.keywordDensity && {\n        keywordsDensity: getKeywordDensityPreview(keywordsDensity),\n      }),\n    };\n\n    return result;\n  };\n\n  React.useEffect(() => {\n    const fetchChecks = async () => {\n      if (!(JSON.stringify(localChecks) === JSON.stringify(checks))) {\n        if (checks?.preview) {\n          const status = await getAllChecks(modifiedData, components, contentType);\n\n          dispatch({\n            type: 'UPDATE_FOR_PREVIEW',\n            value: status,\n          });\n        } else\n          dispatch({\n            type: 'UPDATE_FOR_PREVIEW',\n            value: checks,\n          });\n        setLocalChecks(checks);\n      }\n    };\n\n    fetchChecks().then(() => {\n      setIsLoading(false);\n    });\n  }, [checks]);\n\n  return (\n    <SeoCheckerContext.Provider value={dispatch}>\n      <Box paddingTop={4} width=\"100%\">\n        <Typography tag=\"h2\" variant=\"sigma\" textTransform=\"uppercase\" textColor=\"neutral600\">\n          {formatMessage({\n            id: getTrad('Plugin.name'),\n            defaultMessage: 'SEO Plugin',\n          })}\n        </Typography>\n\n        {metaTitle && metaDescription && (\n          <Modal.Root>\n            <Modal.Trigger>\n              <Box paddingTop={1}>\n                <Button fullWidth variant=\"secondary\" startIcon={<Eye />}>\n                  {formatMessage({\n                    id: getTrad('Button.browser-preview'),\n                    defaultMessage: 'Browser Preview',\n                  })}\n                </Button>\n              </Box>\n            </Modal.Trigger>\n            <BrowserPreview modifiedData={modifiedData} />\n          </Modal.Root>\n        )}\n\n        {openGraph && (\n          <Modal.Root>\n            <Modal.Trigger>\n              <Box paddingTop={2}>\n                <Button fullWidth variant=\"secondary\" startIcon={<Eye />}>\n                  {formatMessage({\n                    id: getTrad('Button.open-graph-preview'),\n                    defaultMessage: 'Open Graph Preview',\n                  })}\n                </Button>\n              </Box>\n            </Modal.Trigger>\n            <OpenGraphPreview modifiedData={modifiedData} />\n          </Modal.Root>\n        )}\n\n        {!isLoading && <PreviewChecks checks={checks} />}\n\n        <Modal.Root>\n          <Modal.Trigger>\n            <Box paddingTop={4}>\n              <TextButton startIcon={<ArrowRight />}>\n                {formatMessage({\n                  id: getTrad('Button.see-details'),\n                  defaultMessage: 'SEE DETAILS',\n                })}\n              </TextButton>\n            </Box>\n          </Modal.Trigger>\n          <SeoChecks\n            updatedAt={document?.updatedAt ?? null}\n            modifiedData={modifiedData}\n            components={components}\n            contentType={contentType}\n            checks={checks}\n          />\n        </Modal.Root>\n      </Box>\n    </SeoCheckerContext.Provider>\n  );\n};\n","import * as React from 'react';\n\n// TODO update this in helper plugin docs\nimport { unstable_useContentManagerContext as useContentManagerContext } from '@strapi/strapi/admin';\n\nimport { Summary } from './Summary';\n\nexport const SeoChecker = () => {\n  const {\n    form: { values },\n  } = useContentManagerContext();\n\n  if (values?.seo) {\n    return <Summary />;\n  }\n\n  return <React.Fragment />;\n};\n","export const pluginPermissions = {\n  // This permission regards the main component (App) and is used to tell\n  // If the plugin link should be displayed in the menu\n  // And also if the plugin is accessible. This use case is found when a user types the url of the\n  // plugin directly in the browser\n  main: [{ action: 'plugin::seo.read', subject: null }],\n};\n","export const prefixPluginTranslations = (trad, pluginId) => {\n  if (!pluginId) {\n    throw new TypeError(\"pluginId can't be empty\");\n  }\n\n  return Object.keys(trad).reduce((acc, current) => {\n    acc[`${pluginId}.${current}`] = trad[current];\n    return acc;\n  }, {});\n};\n","import { Search } from '@strapi/icons';\n\nimport pluginPkg from '../../package.json';\nimport { Initializer } from './components/Initializer';\nimport { SeoChecker } from './components/CMEditView/RightLinksCompo';\nimport { pluginPermissions } from './permissions';\n\nimport { pluginId } from './pluginId';\nimport { prefixPluginTranslations } from './utils/prefixPluginTranslations';\n\nconst name = pluginPkg.strapi.name;\n\nexport default {\n  register(app) {\n    app.addMenuLink({\n      to: `${pluginId}`,\n      icon: Search,\n      permissions: pluginPermissions.main,\n      intlLabel: {\n        id: `${pluginId}.plugin.name`,\n        defaultMessage: 'SEO',\n      },\n      Component: () => import('./pages/App'),\n    });\n    app.registerPlugin({\n      id: pluginId,\n      initializer: Initializer,\n      isReady: false,\n      name,\n    });\n  },\n  bootstrap(app) {\n    app.getPlugin('content-manager').injectComponent('editView', 'right-links', {\n      name: 'SeoChecker',\n      Component: SeoChecker,\n    });\n  },\n  async registerTrads(app) {\n    const { locales } = app;\n\n    const importedTrads = await Promise.all(\n      locales.map((locale) => {\n        return import(`./translations/${locale}.json`)\n          .then(({ default: data }) => {\n            return {\n              data: prefixPluginTranslations(data, pluginId),\n              locale,\n            };\n          })\n          .catch(() => {\n            return {\n              data: {},\n              locale,\n            };\n          });\n      })\n    );\n\n    return Promise.resolve(importedTrads);\n  },\n};\n"],"names":["React","jsxs","jsx","get","isNull","isEmpty","CheckCircle","WarningCircle","CrossCircle","Accordion","IconButton","Information","Box","Typography","useIntl","isEqual","index","Flex","Status","isNumber","ProgressBar","formatDistance","Badge","Fragment","isArray","pull","showdown","name","keywords","components","Modal","EmptyStateLayout","Divider","description","useFetchClient","useContentManagerContext","useDocument","modifiedData","contentType","Button","Eye","TextButton","ArrowRight","pluginId","Search"],"mappings":"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"}